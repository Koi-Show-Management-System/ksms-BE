name: Backend CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  api-unit-test:
    name: Backend Unit Test
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'
      
      - name: Restore dependencies
        run: dotnet restore
      
      - name: Build
        run: dotnet build --no-restore --configuration Release
      
      - name: Test
        run: dotnet test --no-build --verbosity normal --configuration Release
      
  api-build-stage:
    name: Backend Build Stage
    runs-on: ubuntu-latest
    env:
      REGISTRY_NAME: ${{ secrets.DOCKER_HUB_USERNAME }}
      GIT_COMMIT_SHA: ${{github.sha}}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and push Docker image
        run: docker compose -f docker-compose.build.yaml build --parallel ksms-api && docker compose -f docker-compose.build.yaml push
        
  api-deploy-stage:
    name: Backend Deploy Stage
    runs-on: self-hosted
    needs: api-build-stage
    env:
      REGISTRY_NAME: ${{ secrets.DOCKER_HUB_USERNAME }}
      JWT_KEY: ${{ secrets.JWT_KEY }}
      JWT_ISSUER: ${{ secrets.JWT_ISSUER }}
      JWT_AUDIENCE: ${{ secrets.JWT_AUDIENCE }}
      DB_SERVER: ${{ secrets.DB_SERVER }}
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      FIREBASE_BUCKET: ${{ secrets.FIREBASE_BUCKET }}
      GOOGLE_PROJECT_ID: ${{ secrets.GOOGLE_PROJECT_ID }}
      GOOGLE_PRIVATE_KEY_ID: ${{ secrets.GOOGLE_PRIVATE_KEY_ID }}
      GOOGLE_PRIVATE_KEY: ${{ secrets.GOOGLE_PRIVATE_KEY }}
      GOOGLE_CLIENT_EMAIL: ${{ secrets.GOOGLE_CLIENT_EMAIL }}
      GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
      MAIL_HOST: ${{ secrets.MAIL_HOST }}
      MAIL_PORT: ${{ secrets.MAIL_PORT }}
      MAIL_SENDER: ${{ secrets.MAIL_SENDER }}
      MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
      PAYOS_CLIENT_ID: ${{ secrets.PAYOS_CLIENT_ID }}
      PAYOS_API_KEY: ${{ secrets.PAYOS_API_KEY }}
      PAYOS_CHECKSUM_KEY: ${{ secrets.PAYOS_CHECKSUM_KEY }}
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      BASE_URL: ${{secrets.BASE_URL}}
      ROOT_DOMAIN: ${{secrets.ROOT_DOMAIN}}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      - name: Drop Old Container
        run: docker compose -p ksms-application down ksms-api --rmi all -v
      - name: Start new container
        run: docker compose -p ksms-application up ksms-api -d --force-recreate