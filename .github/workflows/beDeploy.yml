name: CI/CD Pipeline - C# Backend to Ubuntu VPS with Swagger Support

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    # Cho phép chạy workflow thủ công từ giao diện GitHub

jobs:
  deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'
        
    - name: Build and Publish
      run: |
        dotnet publish --configuration Release --runtime linux-x64 --self-contained true \
          -p:PublishTrimmed=false -p:PublishSingleFile=false --output ./publish
        
    - name: Setup SSH and Deploy
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        SSH_HOST: ${{ secrets.SSH_HOST }}
        SSH_USER: ${{ secrets.SSH_USER }}
      run: |
        # Setup SSH
        mkdir -p ~/.ssh
        echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H $SSH_HOST >> ~/.ssh/known_hosts
        
        # Create deployment script
        cat > deploy.sh << 'EOF'
        #!/bin/bash
        set -e
        
        APP_NAME="ksms-api"
        APP_PATH="/var/www/$APP_NAME"
        RELEASE_PATH="$APP_PATH/releases/$(date +%Y%m%d%H%M%S)"
        
        # Setup directories
        mkdir -p $RELEASE_PATH
        cd /tmp/app-build
        
        # Copy files and set permissions
        cp -R * $RELEASE_PATH/
        chown -R www-data:www-data $RELEASE_PATH
        ln -sfn $RELEASE_PATH $APP_PATH/current
        
        # Update supervisor config
        cat > /etc/supervisor/conf.d/$APP_NAME.conf << CONF
        [program:$APP_NAME]
        command=dotnet $RELEASE_PATH/KSMS.API.dll
        directory=$RELEASE_PATH
        autostart=true
        autorestart=true
        stderr_logfile=/var/log/$APP_NAME/$APP_NAME.err.log
        stdout_logfile=/var/log/$APP_NAME/$APP_NAME.out.log
        environment=ASPNETCORE_ENVIRONMENT=Production,ASPNETCORE_URLS="http://localhost:5000"
        user=www-data
        CONF
        
        # Restart services
        supervisorctl reread
        supervisorctl update
        supervisorctl restart $APP_NAME
        systemctl restart nginx
        
        # Cleanup old releases (keep last 3)
        cd $APP_PATH/releases && ls -t | tail -n +4 | xargs -I {} rm -rf {}
        EOF
        
        # Compress and deploy
        cd publish
        tar czf ../app.tar.gz .
        ssh $SSH_USER@$SSH_HOST "mkdir -p /tmp/app-build"
        scp ../app.tar.gz deploy.sh $SSH_USER@$SSH_HOST:/tmp/
        
        # Execute deployment
        ssh $SSH_USER@$SSH_HOST "cd /tmp && \
          tar xzf app.tar.gz -C /tmp/app-build && \
          sudo bash deploy.sh && \
          rm -rf app.tar.gz deploy.sh /tmp/app-build"