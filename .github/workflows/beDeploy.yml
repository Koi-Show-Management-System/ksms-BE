name: CI/CD Pipeline - C# Backend to Ubuntu VPS with Swagger Support

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    # Cho phép chạy workflow thủ công từ giao diện GitHub

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build --configuration Release --no-restore
      
    - name: Test
      run: dotnet test --no-build --verbosity normal --configuration Release
      
    - name: Publish
      run: dotnet publish --configuration Release --runtime linux-x64 --self-contained true -p:PublishTrimmed=false -p:PublishSingleFile=false --output ./publish
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: app-build
        path: ./publish/
        
  deploy:
    name: Setup Environment and Deploy to VPS
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: app-build
        path: ./publish/
        
    - name: Setup SSH Config
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

    # 1. Tạo scripts trước
    - name: Create setup script
      run: |
        cat > setup.sh << 'EOL'
        #!/bin/bash
        set -e
        
        # Đảm bảo hệ thống đã cập nhật
        apt-get update
        apt-get upgrade -y
        
        # Cài đặt các gói cần thiết
        apt-get install -y curl wget apt-transport-https gnupg2 software-properties-common sudo unzip
        
        # Cài đặt .NET Runtime cho phiên bản 8.0
        wget https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/packages-microsoft-prod.deb -O packages-microsoft-prod.deb
        dpkg -i packages-microsoft-prod.deb
        apt-get update
        apt-get install -y dotnet-runtime-8.0 aspnetcore-runtime-8.0
        
        # Cài đặt Nginx
        apt-get install -y nginx
        systemctl enable nginx
        systemctl start nginx
        
        # Cài đặt Supervisor
        apt-get install -y supervisor
        systemctl enable supervisor
        systemctl start supervisor
        
        # Tạo cấu trúc thư mục cho ứng dụng
        APP_NAME="ksms-api"
        APP_PATH="/var/www/$APP_NAME"
        mkdir -p $APP_PATH/releases
        mkdir -p $APP_PATH/shared
        
        # Đặt quyền cho thư mục
        chown -R www-data:www-data $APP_PATH
        
        # Tạo thư mục logs
        mkdir -p /var/log/$APP_NAME
        chown -R www-data:www-data /var/log/$APP_NAME
        
        echo "Environment setup completed!"
        EOL
        chmod +x setup.sh

    - name: Create deploy script
      run: |
        cat > deploy.sh << 'EOL'
        #!/bin/bash
        set -e  # Exit on error
        
        # Thiết lập các biến môi trường
        APP_NAME="ksms-api"
        APP_PATH="/var/www/$APP_NAME"
        TIMESTAMP=$(date +%Y%m%d%H%M%S)
        RELEASE_PATH="$APP_PATH/releases/$TIMESTAMP"
        
        # Tạo thư mục release mới
        mkdir -p $RELEASE_PATH
        
        # Cài đặt thư mục release mới
        cp -R /tmp/app-build/* $RELEASE_PATH/
        
        # Debug: Liệt kê các file trong release
        echo "=== Files in release directory ==="
        ls -la $RELEASE_PATH
        find $RELEASE_PATH -name "*.dll"
        
        # Cập nhật symbolic link
        ln -sfn $RELEASE_PATH $APP_PATH/current
        
        # Cấu hình quyền
        chown -R www-data:www-data $RELEASE_PATH
        
        # Tìm DLL file - sử dụng cách linh hoạt hơn
        echo "Searching for main DLL file..."
        DLL_FILE=$(find $RELEASE_PATH -name "KSMS.API.dll" -type f)
        if [ -z "$DLL_FILE" ]; then
            echo "KSMS.API.dll not found, trying to find any DLL..."
            DLL_FILE=$(find $RELEASE_PATH -name "*.dll" -type f -print0 | xargs -0 ls -t | head -1)
        fi
        
        if [ -z "$DLL_FILE" ]; then
            echo "No DLL files found in $RELEASE_PATH"
            exit 1
        fi
        
        echo "Found DLL file: $DLL_FILE"
        DLL_NAME=$(basename "$DLL_FILE")
        DLL_DIR=$(dirname "$DLL_FILE")
        
        # Tạo hoặc cập nhật file cấu hình supervisor
        cat > /etc/supervisor/conf.d/$APP_NAME.conf << EOF
        [program:$APP_NAME]
        command=dotnet $DLL_FILE
        directory=$DLL_DIR
        autostart=true
        autorestart=true
        stderr_logfile=/var/log/$APP_NAME/$APP_NAME.err.log
        stdout_logfile=/var/log/$APP_NAME/$APP_NAME.out.log
        environment=ASPNETCORE_ENVIRONMENT=Production,ASPNETCORE_URLS="http://localhost:5000"
        user=www-data
        stopsignal=INT
        EOF
        
        # Khởi động lại supervisor
        supervisorctl reread
        supervisorctl update
        supervisorctl restart $APP_NAME
        
        # Xóa các bản release cũ (giữ lại 3 bản gần nhất)
        cd $APP_PATH/releases && ls -t | tail -n +4 | xargs -I {} rm -rf {}
        
        echo "Deployment completed successfully!"
        EOL
        chmod +x deploy.sh

    # 2. Sau đó mới thực hiện deploy
    - name: Setup environment and deploy to VPS
      run: |
        # Nén thư mục publish để tăng tốc quá trình transfer
        cd ./publish && tar czf ../app.tar.gz .
        
        # Debug: Kiểm tra nội dung thư mục publish
        echo "=== Checking publish directory content ==="
        ls -la
        find . -name "*.dll"
        
        # Tạo thư mục và copy file nén
        ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "mkdir -p /tmp/app-build"
        scp ../app.tar.gz ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/tmp/app-build/
        
        # Copy scripts
        scp setup.sh deploy.sh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/tmp/
        
        # Giải nén và kiểm tra files trên server
        ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "cd /tmp/app-build && \
          tar xzf app.tar.gz && \
          rm app.tar.gz && \
          echo '=== Server files after extraction ===' && \
          ls -la && \
          find . -name '*.dll'"
        
        # Chạy setup và deploy
        ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "sudo bash /tmp/setup.sh && sudo bash /tmp/deploy.sh"
        
        # Dọn dẹp
        ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "rm -f /tmp/{setup,deploy}.sh"